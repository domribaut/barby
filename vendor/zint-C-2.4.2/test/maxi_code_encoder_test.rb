require 'minitest/spec'
require 'minitest/autorun'

require '../lib/maxi_code_encoder' #TODO fix setup


module MaxiCodeEncoder
  class MaxiCodeEncoderWrapperTest < MiniTest::Spec
    it "should recognize a maxicode id" do
      MaxiCodeEncoder::ZBarcode_ValidID(MaxiCodeEncoder::BARCODE_MAXICODE).must_equal 1
    end

    it "should not recognize a not existing id" do
      MaxiCodeEncoder::ZBarcode_ValidID(4266642).must_equal 0
    end

    it "should be able to build a zint_symbol with maxicode symbologi" do
      zint_symbol = MaxiCodeEncoder::ZBarcode_Create()
      zint_symbol[:symbology] = MaxiCodeEncoder::BARCODE_MAXICODE
      zint_symbol[:symbology].must_equal MaxiCodeEncoder::BARCODE_MAXICODE
    end

    it "should be able to build a zint_symbol with default values" do
      zint_symbol = MaxiCodeEncoder::ZBarcode_Create()
      zint_symbol[:option_3].must_equal 928
      zint_symbol[:symbology].must_equal MaxiCodeEncoder::BARCODE_CODE128
    end

    it "should fail when calling zBarcode encode without input" do
      zint_symbol = MaxiCodeEncoder::ZBarcode_Create()
      zint_symbol[:symbology] = MaxiCodeEncoder::BARCODE_MAXICODE

      MaxiCodeEncoder::ZBarcode_Encode(zint_symbol, "", 0)
      zint_symbol[:errtxt].to_s.must_equal "error: No input data"
    end
  end
  class MaxiCodeEncoderEncodingTest < MiniTest::Spec
    before do
      @zint_symbol = MaxiCodeEncoder::ZBarcode_Create()
      @zint_symbol[:symbology] = MaxiCodeEncoder::BARCODE_MAXICODE
      @zint_symbol[:input_mode] = MaxiCodeEncoder::UNICODE_MODE
      @zint_symbol[:option_1] = 3
      @zint_symbol[:primary] = "51147    276066"
      @real_ish_input = "[)>\x1e01\x1c9651147 \x1c276\x1c066\x1c1Z12345679\x1cUPSN\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1e\x4"
    end

    it "should have 33 rows and a width of 30 when encoded" do
      MaxiCodeEncoder::ZBarcode_Encode(@zint_symbol, @real_ish_input, 0)

      @zint_symbol[:rows].to_s.must_equal "33"
      @zint_symbol[:width].must_equal 30
    end


    #it "should save the world" do
    #  MaxiCodeEncoder::ZBarcode_Encode(@zint_symbol, @real_ish_input, 0)
    #end

    it "should produce the same encoding as the test from zint front end" do
      init_fasit_from_test
      @zint_symbol[:option_1] = -1
      @zint_symbol[:border_width] = -10

      @zint_symbol[:primary] = "999999999840012"
      input = "Demonstration Maxicode symbol generated by libzint"

      MaxiCodeEncoder::ZBarcode_Encode(@zint_symbol, input, 0)
      #todo extract to class
      encoding = Array.new
      (0..32).each do |row|
        s=""
        (0..29).each do |col|
          s += MaxiCodeEncoder::module_is_set(@zint_symbol, row, col).to_s
        end
        encoding << s
      end
      # extract end
      encoding.join.must_equal @fasit_from_zint_test.join
    end

    def init_fasit_from_test
      # result from zint -o bar57.txt -b 57 --border=10 --primary="999999999840012" -d "Demonstration Maxicode symbol generated by libzint"
      @fasit_from_zint_test = [
          ["001100000000101010001000000011"],
          ["101110111111001000001001111100"],
          ["001110101101110001100010110110"],
          ["001010010000000000100000110110"],
          ["110100111010110001010011011100"],
          ["101011111000111110001010111110"],
          ["000000010000000010001000000110"],
          ["001111111010111000001010101110"],
          ["011100111110011001100010001100"],
          ["100000001011000000011001100000"],
          ["010001111011010000000111010000"],
          ["010110001000000001010111100110"],
          ["000010000000000000101101010110"],
          ["011110100000000000100100000000"],
          ["100100010000000000011110101010"],
          ["010101110000000000011101010100"],
          ["000000101000000000001000000010"],
          ["101010001000000000011010101010"],
          ["010101101100000000010001010101"],
          ["000000000000000000000000000000"],
          ["101010011010000000110110101010"],
          ["010101010110000001101001010110"],
          ["000000001010110111101000000011"],
          ["101010100111111101111110101010"],
          ["010101010101010101010001111101"],
          ["000000000000000000001110111100"],
          ["101010101010101010101011011100"],
          ["100000011100001000110001001110"],
          ["010000001000110110101110001011"],
          ["110110110011010111011101111010"],
          ["100100010100111111010101011001"],
          ["110011101001010001001010010100"],
          ["100111010111010011100110100111"]
      ]

    end


  end

end
