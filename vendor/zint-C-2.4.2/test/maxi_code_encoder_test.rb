require 'minitest/spec'
require 'minitest/autorun'

require '../lib/maxi_code_encoder' #TODO fix setup


module MaxiCodeEncoder
  class TestCase < MiniTest::Spec
    it "should recognize a maxicode id" do
      MaxiCodeEncoder::ZBarcode_ValidID(MaxiCodeEncoder::BARCODE_MAXICODE).must_equal 1
    end

    it "should not recognize a not existing id" do
      MaxiCodeEncoder::ZBarcode_ValidID(4266642).must_equal 0
    end

    it "should be able to build a zint_symbol with maxicode symbologi" do
      zint_symbol = MaxiCodeEncoder::ZBarcode_Create()
      zint_symbol[:symbology] = MaxiCodeEncoder::BARCODE_MAXICODE
      zint_symbol[:symbology].must_equal MaxiCodeEncoder::BARCODE_MAXICODE
    end

    it "should be able to build a zint_symbol with default values" do
      zint_symbol = MaxiCodeEncoder::ZBarcode_Create()
      zint_symbol[:option_3].must_equal 928
      zint_symbol[:symbology].must_equal MaxiCodeEncoder::BARCODE_CODE128
    end

    it "should retrieve encoded data from zint_symbol" do
      zint_symbol = MaxiCodeEncoder::ZBarcode_Create()
      zint_symbol[:encoded_data][0][0] = 48
      zint_symbol[:encoded_data][0][1] = 49
      zint_symbol[:encoded_data][1][0] = 48
      zint_symbol[:encoded_data][1][1] = 49
      zint_symbol[:encoded_data][2][0] = 49
      zint_symbol[:encoded_data][2][1] = 49
      #read them back
      zint_symbol.encoded_data_row_as_string(0).must_equal "01"
      zint_symbol.encoded_data_row_as_string(1).must_equal "01"
      zint_symbol.encoded_data_row_as_string(2).must_equal "11"
      zint_symbol.encoded_data_row_as_string(3).must_equal ""
    end


    it "should fail when calling zBarcode encode without input" do
      zint_symbol = MaxiCodeEncoder::ZBarcode_Create()
      zint_symbol[:symbology] = MaxiCodeEncoder::BARCODE_MAXICODE

      MaxiCodeEncoder::ZBarcode_Encode(zint_symbol, "", 0)
      zint_symbol[:errtxt].to_s.must_equal "error: No input data"
    end

    it "should save the world" do
      zint_symbol = MaxiCodeEncoder::ZBarcode_Create()
      zint_symbol[:symbology] = MaxiCodeEncoder::BARCODE_MAXICODE
      zint_symbol[:option_1] = 3
      zint_symbol[:primary] = "51147    276066"
      zint_symbol[:input_mode] = MaxiCodeEncoder::UNICODE_MODE

      input = "[)>\x1e01\x1c9651147 \x1c276\x1c066\x1c1Z12345679\x1cUPSN\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1e\x4"

      res = MaxiCodeEncoder::ZBarcode_Encode(zint_symbol, input, 0)

  #    p ""
  #
  #    (0..32).each do |row|
  #
  #      s= ""
  #      (0..29).each do |col|
  #        s += MaxiCodeEncoder::module_is_set(zint_symbol, row, col).to_s
  #      end
  #      p s
  #    end
    end

    it "should save the world" do
      zint_symbol = MaxiCodeEncoder::ZBarcode_Create()
      zint_symbol[:symbology] = MaxiCodeEncoder::BARCODE_MAXICODE
      #zint_symbol[:option_1] = 3
      zint_symbol[:primary] = "999999999840012"
      zint_symbol[:input_mode] = MaxiCodeEncoder::UNICODE_MODE

      input = "Demonstration Maxicode symbol generated by libzint"

      res = MaxiCodeEncoder::ZBarcode_Encode(zint_symbol, input, 0)

      p ""

      (0..32).each do |row|

        s= ""
        (0..29).each do |col|
          s += MaxiCodeEncoder::module_is_set(zint_symbol, row, col).to_s
        end
        p s
      end
    end


#--primary="999999999840012" -d "Demonstration Maxicode symbol generated by libzint"






    it "should manage to call zBarcode encode" do
      zint_symbol = MaxiCodeEncoder::ZBarcode_Create()
      zint_symbol[:symbology] = MaxiCodeEncoder::BARCODE_MAXICODE
      zint_symbol[:option_1] = 3
      zint_symbol[:primary] = "51147    276066"
      zint_symbol[:input_mode] = MaxiCodeEncoder::UNICODE_MODE

      input = "[)>\x1e01\x1c9651147 \x1c276\x1c066\x1c1Z12345679\x1cUPSN\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1e\x4"

      res = MaxiCodeEncoder::ZBarcode_Encode(zint_symbol, input, 0)

      #  p "errtxt: " + zint_symbol[:errtxt]
      #  p "res: " + res.to_s
      #  p "cell 0,0 ->" + zint_symbol[:encoded_data][0][0].to_s
      #
      #  p "row 0 ->" + zint_symbol[:encoded_data][0].to_ptr.read_string
      #  p "row 1 ->" + zint_symbol.encoded_data_row_as_string(1)
      #  p "row 2 ->" + zint_symbol.encoded_data_row_as_string(2)
      #
      p "width ->" + zint_symbol[:width].to_s
      p "rows ->" + zint_symbol[:rows].to_s


    end


  end

end
